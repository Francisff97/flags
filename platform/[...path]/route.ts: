// app/platform/[...path]/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { promises as fs } from 'fs'
import path from 'path'

// Serve da Node, non Edge (ci serve fs)
export const runtime = 'nodejs'

// MIME minimi
const MIME: Record<string, string> = {
  '.json': 'application/json; charset=utf-8',
  '.png':  'image/png',
  '.jpg':  'image/jpeg',
  '.jpeg': 'image/jpeg',
  '.webp': 'image/webp',
  '.svg':  'image/svg+xml',
}

export async function GET(
  _req: NextRequest,
  { params }: { params: { path?: string[] } }
) {
  try {
    // default: /platform -> platform.json
    const segments = params.path ?? []
    const rel = segments.length ? segments.join('/') : 'platform.json'

    // Base directory: la tua cartella "platform" in root repo
    const baseDir = path.join(process.cwd(), 'platform')
    // Normalizza e blocca traversal
    const filePath = path.join(baseDir, rel)
    const normalized = path.normalize(filePath)
    if (!normalized.startsWith(baseDir)) {
      return new NextResponse('Forbidden', { status: 403 })
    }

    const data = await fs.readFile(normalized)
    const ext = path.extname(normalized).toLowerCase()
    const type = MIME[ext] ?? 'application/octet-stream'

    return new NextResponse(data, {
      status: 200,
      headers: {
        'content-type': type,
        // 1 giorno di cache (modifica a piacere)
        'cache-control': 'public, max-age=86400, s-maxage=86400, immutable',
      },
    })
  } catch {
    return new NextResponse('Not found', { status: 404 })
  }
}